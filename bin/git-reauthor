#!/usr/bin/env bash


init_variables() {
  COMMAND=${0#*-}

  CONFIG=false
  unset OLD_EMAIL
  unset CORRECT_EMAIL
  unset CORRECT_NAME
  TARGET='all'
}


usage() {
  cat << EOF
usage: git ${COMMAND} [<options>]

Mandatory options
    -o, --old-email      <email>  define the old email to replace

Optional options
    -C, --config                  use user values from Git config
    -e, --correct-email  <email>  define the correct email to set
    -n, --correct-name   <name>   define the correct name to set
    -t, --target         <id>     define the target of the replacement
                                  author, committer, all (default)
EOF
}


error() {
  if [[ -n "$1" ]]; then
    local msg=$( echo "error: $1" | sed 's/\\n/\\n       /g' )
    echo -e "${msg}" >&2
  fi
  usage
  exit 1
}


reauthor() {
  local author='
    if [ "${GIT_AUTHOR_EMAIL}" = "${OLD_EMAIL}" ]; then
      [ -z "${CORRECT_EMAIL+x}" ] || export GIT_AUTHOR_EMAIL="${CORRECT_EMAIL}"
      [ -z "${CORRECT_NAME+x}" ] || export GIT_AUTHOR_NAME="${CORRECT_NAME}"
    fi
  '
  local committer='
    if [ "${GIT_COMMITTER_EMAIL}" = "${OLD_EMAIL}" ]; then
      [ -z "${CORRECT_EMAIL+x}" ] || export GIT_COMMITTER_EMAIL="${CORRECT_EMAIL}"
      [ -z "${CORRECT_NAME+x}" ] || export GIT_COMMITTER_NAME="${CORRECT_NAME}"
    fi
  '
  local filter

  case "${TARGET}" in
    author) filter="${author}" ;;
    committer) filter="${committer}" ;;
    all) filter="${author} ${committer}" ;;
  esac

  export OLD_EMAIL
  export CORRECT_EMAIL
  export CORRECT_NAME

  git filter-branch --force --env-filter "${filter}" \
  --tag-name-filter cat -- --branches --tags
}


parse_options() {
  OPTIONS=$(
    getopt \
    --options Ce:hn:o:t: \
    --longoptions 'config,correct-email:,correct-name:,old-email:,target:' \
    --name "${COMMAND}" \
    -- "$@"
  )

  [[ $? -eq 0 ]] || error

  eval set -- "${OPTIONS}"

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --config|-C) CONFIG=true; shift ;;
      --correct-email|-e) CORRECT_EMAIL="$2"; shift 2 ;;
      -h) usage; exit 0 ;;
      --correct-name|-n) CORRECT_NAME="$2"; shift 2 ;;
      --old-email|-o) OLD_EMAIL="$2"; shift 2 ;;
      --target|-t) TARGET="$2"; shift 2 ;;
      --) shift ;;
      *) error "invalid option '$1'" ;;
    esac
  done

  if ${CONFIG}; then
    [[ -n "${CORRECT_EMAIL+x}" ]] || CORRECT_EMAIL=$( git config user.email )
    [[ -n "${CORRECT_NAME+x}" ]] || CORRECT_NAME=$( git config user.name )
  fi
}


validate_options() {
  # OLD_EMAIL should be set (to empty or non-empty string)
  [[ -n "${OLD_EMAIL+x}" ]] || error 'missing required --old-email option'

  # CORRECT_NAME should be either unset or set to non-empty string
  [[ -n "${CORRECT_NAME-x}" ]] || error "empty name is not allowed"

  # Either CORRECT_EMAIL or CORRECT_NAME should be set
  if [[ -z "${CORRECT_EMAIL+x}" ]] && [[ -z "${CORRECT_NAME+x}" ]]; then
    msg="missing correct email and/or name to set"
    msg="${msg}\nuse --correct-email and/or --correct-name options"
    msg="${msg}\nor --config flag with user values set in Git config"
    error "${msg}"
  fi

  if [[ "${TARGET}" != 'all' ]] \
     && [[ "${TARGET}" != 'author' ]] \
     && [[ "${TARGET}" != 'committer' ]]; then
    error "invalid target '${TARGET}'"
  fi
}


init_variables
parse_options "$@"
validate_options

reauthor
